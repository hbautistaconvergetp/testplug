"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defineRoutes = defineRoutes;

var _configSchema = require("@kbn/config-schema");

function defineRoutes(router, logger) {
  //logger.info('casa');
  // Route 1: Handling GET request to '/api/favorite_dashboards/example'
  router.get({
    path: '/api/favorite_dashboards/example',
    validate: false
  }, async (context, request, response) => {
    return response.ok({
      body: {
        time: new Date().toISOString()
      }
    });
  }); // Route 2: Handling GET request to '/api/create_index'

  router.post({
    path: '/api/create_index',
    validate: {
      query: _configSchema.schema.object({
        index: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    const client = (await context.core).elasticsearch.client.asCurrentUser;
    const {
      index
    } = request.query;

    try {
      const existIndex = await client.indices.exists({
        index: index
      });

      if (existIndex) {
        return response.ok({
          body: {
            exist: existIndex
          }
        });
      } else {
        const createIndex = await client.indices.create({
          index: index,
          body: {
            mappings: {
              properties: {
                title: {
                  type: 'keyword'
                },
                description: {
                  type: 'text'
                },
                updatedAt: {
                  type: 'keyword'
                },
                url: {
                  type: 'keyword'
                },
                active: {
                  type: 'boolean'
                }
              }
            }
          }
        });
        return response.ok({
          body: {
            element: createIndex
          }
        });
      }
    } catch (e) {
      var _e$statusCode;

      return response.customError({
        statusCode: (_e$statusCode = e.statusCode) !== null && _e$statusCode !== void 0 ? _e$statusCode : 500,
        body: {
          message: e.message
        }
      });
    }
  });
  router.post({
    path: '/api/get_favorites',
    validate: {
      query: _configSchema.schema.object({
        index: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    const client = (await context.core).elasticsearch.client.asCurrentUser;
    const {
      index
    } = request.query;

    try {
      const allFavorites = await client.search({
        index: index,
        query: {
          match_all: {}
        }
      });
      return response.ok({
        body: {
          values: allFavorites.hits.hits
        }
      });
    } catch (e) {
      var _e$statusCode2;

      return response.customError({
        statusCode: (_e$statusCode2 = e.statusCode) !== null && _e$statusCode2 !== void 0 ? _e$statusCode2 : 500,
        body: {
          message: e.message
        }
      });
    }
  });
  router.post({
    path: '/api/serarchindex',
    options: {
      body: {
        accepts: ['application/json']
      }
    },
    validate: {
      body: _configSchema.schema.object({
        dsdocument: _configSchema.schema.any()
      }),
      query: _configSchema.schema.object({
        index: _configSchema.schema.any()
      })
    }
  }, async (context, request, response) => {
    const client = (await context.core).elasticsearch.client.asCurrentUser;
    const {
      index
    } = request.query;
    const {
      dsdocument
    } = request.body;
    const dsjson = JSON.parse(dsdocument);

    try {
      const searchResult = await client.search({
        index: index,
        query: dsjson
      });
      return response.ok({
        body: {
          exist: searchResult
        }
      });
    } catch (e) {
      var _e$statusCode3;

      return response.customError({
        statusCode: (_e$statusCode3 = e.statusCode) !== null && _e$statusCode3 !== void 0 ? _e$statusCode3 : 500,
        body: {
          message: e.message
        }
      });
    }
  }); // Route 3 put values

  router.post({
    path: '/api/putdocindex',
    options: {
      body: {
        accepts: ['application/json']
      }
    },
    validate: {
      body: _configSchema.schema.object({
        dsdocument: _configSchema.schema.any()
      }),
      query: _configSchema.schema.object({
        index: _configSchema.schema.any()
      })
    }
  }, async (context, request, response) => {
    const client = (await context.core).elasticsearch.client.asCurrentUser;
    const {
      index
    } = request.query;
    const {
      dsdocument
    } = request.body;
    const dsjson = JSON.parse(dsdocument);

    try {
      const existDoc = await client.search({
        index: index,
        query: {
          term: {
            "id.keyword": {
              value: dsjson.id
            }
          }
        }
      });

      if (existDoc.hits.total.value == 1) {
        client.update({
          index: index,
          id: dsjson.id,
          doc: dsjson
        });
        return response.ok({
          body: {
            exist: 'update complete'
          }
        });
      } else {
        client.index({
          index: index,
          id: dsjson.id,
          document: dsjson
        });
        return response.ok({
          body: {
            element: 'true'
          }
        });
      }
    } catch (e) {
      var _e$statusCode4;

      return response.customError({
        statusCode: (_e$statusCode4 = e.statusCode) !== null && _e$statusCode4 !== void 0 ? _e$statusCode4 : 500,
        body: {
          message: e.message
        }
      });
    }
  });
  router.post({
    path: '/api/deletdashboard',
    validate: {
      query: _configSchema.schema.object({
        index: _configSchema.schema.any(),
        id: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    const client = (await context.core).elasticsearch.client.asCurrentUser;
    const {
      index,
      id
    } = request.query;

    try {
      const existDoc = await client.delete({
        index: index,
        id: id
      });
      return response.ok({
        body: {
          element: existDoc
        }
      });
    } catch (e) {
      var _e$statusCode5;

      return response.customError({
        statusCode: (_e$statusCode5 = e.statusCode) !== null && _e$statusCode5 !== void 0 ? _e$statusCode5 : 500,
        body: {
          message: e.message
        }
      });
    }
  });
  router.post({
    path: '/api/stateindex',
    validate: {
      query: _configSchema.schema.object({
        index: _configSchema.schema.any(),
        id: _configSchema.schema.string(),
        state: _configSchema.schema.boolean()
      })
    }
  }, async (context, request, response) => {
    const client = (await context.core).elasticsearch.client.asCurrentUser;
    const {
      index,
      id,
      state
    } = request.query;

    try {
      //logger.info(id);
      const existDoc = await client.update({
        index: index,
        id: id,
        doc: {
          isChecked: state
        }
      });
      return response.ok({
        body: {
          element: existDoc
        }
      });
    } catch (e) {
      var _e$statusCode6;

      return response.customError({
        statusCode: (_e$statusCode6 = e.statusCode) !== null && _e$statusCode6 !== void 0 ? _e$statusCode6 : 500,
        body: {
          message: e.message
        }
      });
    }
  });
  router.post({
    path: '/api/updatestatus',
    validate: {
      query: _configSchema.schema.object({
        index: _configSchema.schema.string()
      })
    }
  }, async (context, request, response) => {
    const client = (await context.core).elasticsearch.client.asCurrentUser;
    const {
      index
    } = request.query;

    try {
      const createIndex = await client.updateByQuery({
        index: index,
        refresh: true,
        script: {
          lang: 'painless',
          source: 'ctx._source["isChecked"] = false'
        },
        query: {
          match_all: {}
        }
      });
      return response.ok({
        body: {
          element: createIndex
        }
      });
    } catch (e) {
      var _e$statusCode7;

      return response.customError({
        statusCode: (_e$statusCode7 = e.statusCode) !== null && _e$statusCode7 !== void 0 ? _e$statusCode7 : 500,
        body: {
          message: e.message
        }
      });
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,